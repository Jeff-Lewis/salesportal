/** * Created by Jonathan on 06/12/2015. */var express = require('express');var router = express.Router();var clientController = require('../controllers/ClientController.js');var validator = require('validator');var auth = require('../config/auth');var jsonValidator = require('json-validator');router.get('/',auth.ensureAuthenticated, function (req, res, next) {    clientController.list(function (resp) {        res.json(resp);    });});router.get('/:id',auth.ensureAuthenticated, function (req, res, next) {    clientController.id = (validator.trim(validator.escape(req.params.id)));    clientController.client(function (resp) {        res.json(resp);    });});router.post('/',auth.ensureAuthenticated, function (req, res, next) {    if(validator.isJSON(JSON.stringify(req.body))){        jsonValidator.validate(JSON.stringify(req.body), clientController.clientsJSON, function(err, messages) {            if(err) {                throw err;            }            console.log(req.body);            if (JSON.stringify(messages).length > 2) {                var errors = [];                for (var key in messages) {                    errors.push({ msg: messages[key][0]});                }                res.json({ error: errors });            }            else {                var json = JSON.stringify(req.body, null, 4);                json = JSON.parse(json);                clientController.name = json.name;                clientController.index = json.index;                clientController.address = [];                for(i=0, leng=json.address.length; i< leng; i++){                    clientController.address.push({                        index:i+1,                        address:json.address[i].address,                        number:json.address[i].number,                        district:json.address[i].district                    });                }                clientController.save(function (resp) {                    res.json(resp);                });            }        });    }    else {        res.json(req.body);    }    /*clientController.name = (validator.trim(validator.escape(req.body.name)));    req.checkBody('name', 'nome não informado').notEmpty();    // Check for errors    var errors = req.validationErrors();    if (errors) {        res.json({ error: errors });    } else {        clientController.save(function (resp) {            res.json(resp);        });    }*/});router.put('/',auth.ensureAuthenticated, function (req, res, next) {    if(validator.isJSON(JSON.stringify(req.body))){        jsonValidator.validate(JSON.stringify(req.body), clientController.clientsJSON, function(err, messages) {            if(err) {                throw err;            }            if (JSON.stringify(messages).length > 2) {                var errors = [];                for (var key in messages) {                    errors.push({ msg: messages[key][0]});                }                res.json({ error: errors });            }            else {                var json = JSON.stringify(req.body, null, 4);                json = JSON.parse(json);                clientController.id = json.id;                clientController.index = json.index;                clientController.name = json.name;                clientController.address = [];                for(i=0, leng=json.address.length; i< leng; i++){                    clientController.address.push({                        index:i+1,                        id:json.address[i].id,                        address:json.address[i].address,                        number:json.address[i].number,                        district:json.address[i].district                    });                }                clientController.update(function (resp) {                    res.json(resp);                });            }        });    }    else {        res.json(req.body);    }    /*clientController.id = (validator.trim(validator.escape(req.body.id)));    clientController.name = (validator.trim(validator.escape(req.body.name)));    req.checkBody('id', 'id não informado').notEmpty();    req.checkBody('name', 'Nome não informado').notEmpty();    // Check for errors    var errors = req.validationErrors();    if (errors) {        res.json({ error: errors });    } else {        clientController.update(function (resp) {            res.json(resp);        });    }*/});router.delete('/:id',auth.ensureAuthenticated, function (req, res, next) {    clientController.id = (validator.trim(validator.escape(req.params.id)));    clientController.remove(function (resp) {        res.json(resp);    });});module.exports = router;